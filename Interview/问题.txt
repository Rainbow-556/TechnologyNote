1、自我介绍
	你好，我叫李响，15年毕业的，工作3年，一直都是从事Android App的开发工作，先后在两家互联网金融公司做Android，一共参与开发过四个App，都是金融类型的App。
	其中第一家公司是金斧子，主要做公募基金和私募基金相关的业务，在金斧子参与过两个App的开发，第一个是做私募相关的叫做为“金斧子财富”，第二个是做公募基金相关的叫做“金斧子理财”
	离开金斧子之后就来到了荷包，在荷包的第一年是参与荷包App的Android端的业务开发，主要负责荷包App的新业务模块的开发工作。
	在去年10月份，公司拿到公募基金销售牌照之后，公司决定要做一个新的销售公募基金的App，之后我这边就主要负责这个公募基金App荷小基Android端的开发，
	工作内容主要是主导整个应用框架搭建和业务开发，现在已经迭代到了2.3版本
	
2、工作中遇到的难点？怎么解决的？或者比较难的功能？
	编写带交互和动画的自定义控件(收益图表相关)
	在线客服模块，聊天消息的各种状态处理，自定义相册
	接入React Native，查找和阅读RN相关源码解决问题，RN调用原生模块时阻塞了通信线程，导致原生事件无法发送到js端造成页面无反应
	RN Activity第一次启动白屏的优化，在Activity.onCreate()方法中显示一个LoadingDialog，在js bundle加载完了之后dismiss掉

3、擅长哪一方面的技术？
	UI相关的，自定义控件和动画

4、介绍项目(架构方式)
	基于MVP和MVC两种模式进行功能开发，简单的静态页面使用MVC，复杂动态的页面使用MVP，网络库用的okHttp，图片加载库用的Glide，对于这种功能性的第三方库，都是先自己封装一套接口，
	然后底层用第三方库去实现，在App中只使用到了自己的接口
	单工程开发，按照功能模块来分包
	组件之间的通信是基于LocalBroadcastManager来实现的，比如用户登录、登出等
	
	页面路由：
		目前App页面不是很多，所以是基于类似于url的短链方式进行跳转，核心的就是用HashMap保存所有信息，键为url，值为Activity的class对象，提供查找页面的结果回调处理，
		支持在找到目标页面后会经过一个拦截器处理，实际应用为某些页面需要登录或者绑卡等特定条件才能进入时，跳转到登录页等
		优化空间：使用编译时注解，自动注册所有页面
		

5、离职原因


为什么想来XXX？
个人做的最成功最有挑战的事情是什么？
工作中最难忘的经历？
对加入我们团队有何期待？

Java基础

Android基础

网络协议

简历中项目的每一项功能是如何实现的
	在线客服模块：
		后台提供一个获取聊天记录的接口，这个接口有个参数为时间戳，客户端每次进入时，先在子线程中把数据库的最近20条数据加载出来显示，
		再把数据库中最近的一条成功状态的聊天记录的时间作为参数去调这个接口，接口返回的数据是个聊天记录数组，然后把返回的数据合并到现有的数据源中，
		当用户发送消息的时候，先把这条消息存到数据库中，同时会把数据库中的这条数据的发送状态指定为失败，然后把该数据添加到adapter中，然后调用发送消息
		接口，发送消息接口会把这条消息的数据重新返回回来，用于更新App本地数据库和RecyclerView的状态
		图片压缩，先通过inSampleSize进行尺寸压缩，再通过Bitmap.compress()进行质量压缩，最后使用腾讯的万象优图SDK上传
	自定义View和动画是如何优化的：
		onDraw()中避免创建对象，和减少数据处理的逻辑，最好提前处理好数据，onDraw()中直接拿数据来绘制
		动画执行时开启硬件加速，动画结束后关闭硬件加速，如果做动画的View的DisplayList在动画过程中不断的失效，导致GPU上的缓存会一直失效，这种情况下不建议使用硬件加速，如果只是对
		Alpha、Rotate等基础属性做动画时就可以使用硬件加速来提升流畅性
		双缓冲，先把所有内容绘制到内存中的Bitmap，最后一次性把该Bitma绘制到屏幕，访问内存比访问屏幕快的多，这样只需要访问一次屏幕
	
	App中的性能优化(、渲染、过渡绘制)
		布局层级：RelativeLayout和LinearLayout的性能对比，使用ConstraintLayout，ViewStub(原理)、Merge标签的使用，weight属性导致重复测量的问题
		过渡绘制：去除布局当中多余的背景色，可通过开发者模式中的Show GPU Overdraw开启
		内存优化：
			尽量避免创建多余的对象、使用时才创建、使用集合时如果能预知大小则在构造方法中传入
			大的本地背景图加载时用BitmapFactory.decodeResource()方法去加载Bitmap，页面销毁的时候手动recycle掉，因为直接使用ImageView.setImageResource()，会缓存这个Bitmap到内存(Drawable的内存缓存)，
			而这个图片又不是常用的，造成浪费，recycle()方法在确定某个Bitmap不会再被使用时，可以手动调用，否则可以留给系统会自动检测到该Bitmap上没有任何引用时，gc会自动回收掉。
			使用优化过后的集合类，SparseArray代替Key为int类型的HashMap，优点，减少了int的自动装箱和额外生成Entry类，
			SparseArray包含两个数组，键int[]和值Object[]，因为Key为int类型，是按顺序存储的，查找元素时使用二分查找
			在元素不多并且插入和删除不频繁的情况下，使用ArrayMap代替HashMap，ArrayMap也包含两个数组，hash[]和keyValue[]，对应关系为keyValue[i<<1]为key，keyValue[(i<<1) + 1]为value，
			hash冲突的解决是通过在keyValue[]的index后继续插入hash值相同的键值对，查找的时候就在index处上下查询，匹配key和hash值是否相等
		多进程下会多次初始化Application导致一些代码重复执行，只在主进程才执行那些代码
		耗电优化：尽量减少不必要的网络请求，一些资源使用缓存，如果对定位精度要求不高的话，可以使用网络定位，而不去使用GPS定位
	
	App冷启动优化：
		懒加载初始化第三方SDK(X5内核)，减少Application中的逻辑，减少闪屏Activity的onCreate方法执行逻辑，闪屏Activity设置windowBackground，给用户一种视觉上的速度优化
	
	点击推送时，是如何处理推送协议的？跳转到指定页面时怎么操作？
		判断App是否还有Activity，如果有则直接解析跳转协议跳转到指定页面。如果没有则先启动闪屏页，进行常规的App初始化，再打开首页，在首页解析协议跳转
	
	
数据结构和算法